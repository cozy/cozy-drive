webpackHotUpdate("vendors",{

/***/ "./node_modules/cozy-sharing/dist/state.js":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"receiveSharings\", function() { return receiveSharings; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addSharing\", function() { return addSharing; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateSharing\", function() { return updateSharing; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"revokeRecipient\", function() { return revokeRecipient; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"revokeSelf\", function() { return revokeSelf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addSharingLink\", function() { return addSharingLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"updateSharingLink\", function() { return updateSharingLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"revokeSharingLink\", function() { return revokeSharingLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"receivePaths\", function() { return receivePaths; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"matchingInstanceName\", function() { return matchingInstanceName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isOwner\", function() { return isOwner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"canReshare\", function() { return canReshare; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getOwner\", function() { return getOwner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRecipients\", function() { return getRecipients; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSharingLink\", function() { return getSharingLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSharingForSelf\", function() { return getSharingForSelf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSharingType\", function() { return getSharingType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDocumentSharing\", function() { return getDocumentSharing; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSharingById\", function() { return getSharingById; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDocumentPermissions\", function() { return getDocumentPermissions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasSharedParent\", function() { return hasSharedParent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hasSharedChild\", function() { return hasSharedChild; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSharedParentPath\", function() { return getSharedParentPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSharedDocIds\", function() { return getSharedDocIds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSharingDocIds\", function() { return getSharingDocIds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getExternalSharingIds\", function() { return getExternalSharingIds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPermissionDocIds\", function() { return getPermissionDocIds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDocumentSharingType\", function() { return getDocumentSharingType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isReadOnlySharing\", function() { return isReadOnlySharing; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getSharedDocIdsBySharings\", function() { return getSharedDocIdsBySharings; });\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"./node_modules/@babel/runtime/helpers/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"./node_modules/@babel/runtime/helpers/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"./node_modules/lodash/get.js\");\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\nvar RECEIVE_SHARINGS = 'RECEIVE_SHARINGS';\nvar ADD_SHARING = 'ADD_SHARING';\nvar UPDATE_SHARING = 'UPDATE_SHARING';\nvar REVOKE_RECIPIENT = 'REVOKE_RECIPIENT';\nvar REVOKE_SELF = 'REVOKE_SELF';\nvar ADD_SHARING_LINK = 'ADD_SHARING_LINK';\nvar UPDATE_SHARING_LINK = 'UPDATE_SHARING_LINK';\nvar REVOKE_SHARING_LINK = 'REVOKE_SHARING_LINK';\nvar RECEIVE_PATHS = 'RECEIVE_PATHS'; // actions\n\nvar receiveSharings = function receiveSharings(_ref) {\n  var instanceUri = _ref.instanceUri,\n      _ref$sharings = _ref.sharings,\n      sharings = _ref$sharings === void 0 ? [] : _ref$sharings,\n      _ref$permissions = _ref.permissions,\n      permissions = _ref$permissions === void 0 ? [] : _ref$permissions,\n      _ref$apps = _ref.apps,\n      apps = _ref$apps === void 0 ? [] : _ref$apps;\n  return {\n    type: RECEIVE_SHARINGS,\n    data: {\n      sharings: sharings.filter(function (s) {\n        console.log(s);\n        return !areAllRecipientsRevoked(s) && !hasBeenSelfRevoked(s, instanceUri);\n      }),\n      permissions: permissions,\n      apps: apps\n    }\n  };\n};\nvar addSharing = function addSharing(data, path) {\n  return {\n    type: ADD_SHARING,\n    data: data,\n    path: path\n  };\n};\nvar updateSharing = function updateSharing(sharing) {\n  return {\n    type: UPDATE_SHARING,\n    sharing: sharing\n  };\n};\nvar revokeRecipient = function revokeRecipient(sharing, index, path) {\n  return {\n    type: REVOKE_RECIPIENT,\n\n    /* We set revoked status to the revoked member.\n    We can't just simply remove it, 'cauz we use the index\n    to remove members..\n    */\n    sharing: _objectSpread(_objectSpread({}, sharing), {}, {\n      attributes: _objectSpread(_objectSpread({}, sharing.attributes), {}, {\n        members: sharing.attributes.members.map(function (m, idx) {\n          if (idx === index) {\n            return _objectSpread(_objectSpread({}, m), {}, {\n              status: 'revoked'\n            });\n          }\n\n          return m;\n        })\n      })\n    }),\n    path: path\n  };\n};\nvar revokeSelf = function revokeSelf(sharing) {\n  return {\n    type: REVOKE_SELF,\n    sharing: sharing\n  };\n};\nvar addSharingLink = function addSharingLink(data) {\n  return {\n    type: ADD_SHARING_LINK,\n    data: data\n  };\n};\nvar updateSharingLink = function updateSharingLink(data) {\n  return {\n    type: UPDATE_SHARING_LINK,\n    data: data\n  };\n};\nvar revokeSharingLink = function revokeSharingLink(permissions) {\n  return {\n    type: REVOKE_SHARING_LINK,\n    permissions: permissions\n  };\n};\nvar receivePaths = function receivePaths(paths) {\n  return {\n    type: RECEIVE_PATHS,\n    paths: paths\n  };\n};\nvar matchingInstanceName = function matchingInstanceName() {\n  var instanceUri = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return function (shareMember) {\n    return shareMember.instance && shareMember.instance.toString().toLowerCase() === instanceUri.toLowerCase();\n  };\n}; // reducers\n\nvar byIdInitialState = {\n  sharings: [],\n  permissions: []\n};\n\nvar isItemEmpty = function isItemEmpty(item) {\n  return item.sharings.length === 0 && item.permissions.length === 0;\n};\n\nvar updateByIdItem = function updateByIdItem(state, id, updater) {\n  var byIdState = state[id],\n      rest = _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1___default()(state, [id].map(_toPropertyKey));\n\n  var update = updater(byIdState || byIdInitialState);\n  return isItemEmpty(update) ? rest : _objectSpread(_objectSpread({}, rest), {}, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()({}, id, update));\n};\n\nvar indexSharing = function indexSharing() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var sharing = arguments.length > 1 ? arguments[1] : undefined;\n  var sharedDocs = getSharedDocIds(sharing);\n  return sharedDocs.reduce(function (byId, id) {\n    var updatedByIdItem = updateByIdItem(byId, id, function (state) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // todo index by id instead of having an array\n        sharings: Object.values(state.sharings).includes(sharing.id) ? _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(state.sharings) : [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(state.sharings), [sharing.id])\n      });\n    });\n    return updatedByIdItem;\n  }, state);\n};\n\nvar forgetSharing = function forgetSharing() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var sharing = arguments.length > 1 ? arguments[1] : undefined;\n  return getSharedDocIds(sharing).reduce(function (byId, id) {\n    return updateByIdItem(byId, id, function (state) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sharings: state.sharings.filter(function (sid) {\n          return sid !== sharing.id;\n        })\n      });\n    });\n  }, state);\n};\n\nvar indexPermission = function indexPermission() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var perm = arguments.length > 1 ? arguments[1] : undefined;\n  return getSharedDocIds(perm).reduce(function (byId, id) {\n    return updateByIdItem(byId, id, function (state) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        permissions: [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(state.permissions), [perm.id])\n      });\n    });\n  }, state);\n};\n\nvar forgetPermission = function forgetPermission() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var permission = arguments.length > 1 ? arguments[1] : undefined;\n  return getSharedDocIds(permission).reduce(function (byId, id) {\n    return updateByIdItem(byId, id, function (state) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        permissions: state.permissions.filter(function (pid) {\n          return pid !== permission.id;\n        })\n      });\n    });\n  }, state);\n};\n\nvar byDocId = function byDocId() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_SHARINGS:\n      // eslint-disable-next-line no-case-declarations\n      var intermediaryState = action.data.sharings.reduce(function (byId, sharing) {\n        return indexSharing(byId, sharing);\n      }, state);\n      return action.data.permissions.reduce(function (byId, perm) {\n        return indexPermission(byId, perm);\n      }, intermediaryState);\n\n    case ADD_SHARING:\n      return indexSharing(state, action.data);\n\n    case REVOKE_RECIPIENT:\n    case UPDATE_SHARING:\n      if (areAllRecipientsRevoked(action.sharing)) {\n        return forgetSharing(state, action.sharing);\n      }\n\n      return state;\n\n    case ADD_SHARING_LINK:\n      if (!Array.isArray(action.data)) {\n        return indexPermission(state, action.data);\n      } else {\n        var clonedState = _objectSpread({}, state);\n\n        action.data.map(function (s) {\n          clonedState = _objectSpread({}, indexPermission(clonedState, s));\n        });\n        return clonedState;\n      }\n\n    case REVOKE_SELF:\n      return forgetSharing(state, action.sharing);\n\n    case REVOKE_SHARING_LINK:\n      return action.permissions.reduce(function (byId, perm) {\n        return forgetPermission(byId, perm);\n      }, state);\n\n    default:\n      return state;\n  }\n};\n\nvar permissions = function permissions() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_SHARINGS:\n      return action.data.permissions;\n\n    case ADD_SHARING_LINK:\n      if (!Array.isArray(action.data)) {\n        return [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(state), [action.data]);\n      } else {\n        return [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(state), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(action.data));\n      }\n\n    case UPDATE_SHARING_LINK:\n      return state.map(function (p) {\n        return p.id === action.data.id ? action.data : p;\n      });\n\n    case REVOKE_SHARING_LINK:\n      // eslint-disable-next-line no-case-declarations\n      var permIds = action.permissions.map(function (p) {\n        return p.id;\n      });\n      return state.filter(function (p) {\n        return permIds.indexOf(p.id) === -1;\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar apps = function apps() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_SHARINGS:\n      return action.data.apps;\n\n    default:\n      return state;\n  }\n};\n\nvar sharings = function sharings() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_SHARINGS:\n      return action.data.sharings;\n\n    case ADD_SHARING:\n      // be sure that we're not adding the sharing twice\n      // can be the case if we launch the create and\n      // receive the realtime in the same time\n      // TODO Index by index...\n      // eslint-disable-next-line\n      var filtered_state = state.filter(function (s) {\n        return s.id !== action.data.id;\n      });\n      return [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(filtered_state), [action.data]);\n\n    case UPDATE_SHARING:\n    case REVOKE_RECIPIENT:\n      return state.map(function (s) {\n        return s.id !== action.sharing.id ? s : action.sharing;\n      });\n\n    case REVOKE_SELF:\n      return state.filter(function (s) {\n        return s.id !== action.sharing.id;\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar sharedPaths = function sharedPaths() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RECEIVE_PATHS:\n      // !TODO Remove after we solved the sharedPaths bugs\n      // eslint-disable-next-line\n      return action.paths;\n\n    case ADD_SHARING:\n      // !TODO Remove after we solved the sharedPaths bugs\n      // eslint-disable-next-line\n      var newState = [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(state), [action.path]);\n      return newState;\n\n    case REVOKE_RECIPIENT:\n      if (areAllRecipientsRevoked(action.sharing)) {\n        return state.filter(function (p) {\n          return p !== action.path;\n        });\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    byDocId: byDocId(state.byDocId, action),\n    sharings: sharings(state.sharings, action),\n    permissions: permissions(state.permissions, action),\n    apps: apps(state.apps, action),\n    sharedPaths: sharedPaths(state.sharedPaths, action)\n  };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (reducer); // selectors\n\nvar isOwner = function isOwner(state, docId) {\n  if (state.byDocId[docId] && state.byDocId[docId].sharings.length !== 0) {\n    return getSharingById(state, state.byDocId[docId].sharings[0]).attributes.owner === true;\n  }\n\n  return true;\n};\nvar canReshare = function canReshare(state, docId, instanceUri) {\n  var sharing = getDocumentSharing(state, docId);\n  var me = sharing.attributes.members.find(matchingInstanceName(instanceUri));\n  return sharing.attributes.open_sharing === true && me && !me.read_only;\n};\nvar getOwner = function getOwner(state, docId) {\n  return getRecipients(state, docId).find(function (r) {\n    return r.status === 'owner';\n  });\n};\nvar getRecipients = function getRecipients(state, docId) {\n  var recipients = getDocumentSharings(state, docId).map(function (sharing) {\n    var type = getDocumentSharingType(sharing, docId);\n    return sharing.attributes.members.map(function (m, idx) {\n      return _objectSpread(_objectSpread({}, m), {}, {\n        type: m.read_only ? 'one-way' : type,\n        sharingId: sharing.id,\n        index: idx,\n        avatarPath: \"/sharings/\".concat(sharing.id, \"/recipients/\").concat(idx, \"/avatar\")\n      });\n    });\n  }).reduce(function (acc, member) {\n    return acc.concat(member);\n  }, []).filter(function (r) {\n    return r.status !== 'revoked';\n  });\n\n  if (recipients[0] && recipients[0].status === 'owner') {\n    return [recipients[0]].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(recipients.filter(function (r) {\n      return r.status !== 'owner';\n    })));\n  }\n\n  return recipients;\n};\nvar getSharingLink = function getSharingLink(state, docId, documentType) {\n  // This shouldn't have happened, but unfortunately some duplicate sharing links have been created in the past\n  var perms = getDocumentPermissions(state, docId);\n  if (perms.length === 0) return null;\n  var perm = perms[0]; // We used to use `email` as `codes` attribute for a sharingByLink.\n  // But when we use cozy-client to create a Permission, by default\n  // the codes attribute is set to `code`. MesPapiers app is using this\n  // default behavior... So the sharing by link created by mes papiers\n  // didn't appear correctly in cozy-sharing.\n  // This is a bit ugly, we should have a better way to know if this is\n  // a sharing by link or not.\n\n  var code = lodash_get__WEBPACK_IMPORTED_MODULE_3___default()(perm, 'attributes.shortcodes.email') || lodash_get__WEBPACK_IMPORTED_MODULE_3___default()(perm, 'attributes.shortcodes.code') || lodash_get__WEBPACK_IMPORTED_MODULE_3___default()(perm, 'attributes.codes.email') || lodash_get__WEBPACK_IMPORTED_MODULE_3___default()(perm, 'attributes.codes.code');\n\n  if (code) {\n    return buildSharingLink(state, documentType, code);\n  } else {\n    return null;\n  }\n};\nvar getSharingForSelf = function getSharingForSelf(state, docId) {\n  return getDocumentSharing(state, docId);\n};\nvar getSharingType = function getSharingType(state, docId, instanceUri) {\n  var sharing = getSharingForSelf(state, docId);\n  if (!sharing) return false;\n  var type = getDocumentSharingType(sharing, docId);\n  if (sharing.attributes.owner) return type;\n  var me = sharing.attributes.members.find(matchingInstanceName(instanceUri));\n  return me && me.read_only ? 'one-way' : type;\n};\nvar getDocumentSharing = function getDocumentSharing(state, docId) {\n  return getDocumentSharings(state, docId)[0] || null;\n};\n\nvar getDocumentSharings = function getDocumentSharings(state, docId) {\n  return !state.byDocId[docId] ? [] : state.byDocId[docId].sharings.map(function (id) {\n    return getSharingById(state, id);\n  });\n};\n\nvar getSharingById = function getSharingById(state, id) {\n  return state.sharings.find(function (s) {\n    return s.id === id;\n  });\n};\nvar getDocumentPermissions = function getDocumentPermissions(state, docId) {\n  return !state.byDocId[docId] ? [] : state.byDocId[docId].permissions.map(function (id) {\n    return getPermissionById(state, id);\n  });\n};\n\nvar getPermissionById = function getPermissionById(state, id) {\n  return state.permissions.find(function (s) {\n    return s.id === id;\n  });\n};\n\nvar getApps = function getApps(state) {\n  return state.apps;\n};\n\nvar hasSharedParent = function hasSharedParent(state, documentPath) {\n  if (!state.sharedPaths) {\n    return false; // hasSharedParent should not occur\n  }\n\n  return state.sharedPaths.some(function (path) {\n    return documentPath.indexOf(\"\".concat(path, \"/\")) === 0;\n  });\n};\nvar hasSharedChild = function hasSharedChild(state, documentPath) {\n  if (!state.sharedPaths) {\n    return false; // hasSharedChild should not occur\n  }\n\n  var ret = state.sharedPaths.some(function (path) {\n    return path.indexOf(\"\".concat(documentPath, \"/\")) === 0;\n  });\n  return ret;\n};\n/**\n * Returns the path of the shared parent for a given document\n * @param {object} state - Redux state\n * @param {string} documentPath - Path of the given document\n * @returns {string|null} Path of the shared parent\n */\n\nvar getSharedParentPath = function getSharedParentPath(state, documentPath) {\n  if (hasSharedParent(state, documentPath)) {\n    return state.sharedPaths.find(function (path) {\n      return documentPath.startsWith(path);\n    });\n  }\n\n  return null;\n}; // helpers\n\nvar getSharedDocIds = function getSharedDocIds(doc) {\n  return doc.type === 'io.cozy.sharings' ? getSharingDocIds(doc) : getPermissionDocIds(doc);\n};\nvar getSharingDocIds = function getSharingDocIds(sharing) {\n  var docs = sharing.attributes.rules.map(function (r) {\n    return r.values;\n  }).reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []);\n\n  if (sharing.attributes.shortcut_id) {\n    docs.push(sharing.attributes.shortcut_id);\n  }\n\n  return docs;\n};\n/**\n * Get ids of shared documents, but only if sharing is ready so files exist\n * @param {object} sharing\n * @param {string} instanceUri\n * @returns {string[]} List of document ids of a sharing\n */\n\nvar getExternalSharingIds = function getExternalSharingIds(sharing, instanceUri) {\n  var member = sharing.attributes.members.find(function (member) {\n    return member.instance === instanceUri;\n  });\n  var docs = [];\n\n  if ((member === null || member === void 0 ? void 0 : member.status) === 'ready') {\n    docs = sharing.attributes.rules.map(function (r) {\n      return r.values;\n    }).reduce(function (acc, val) {\n      return acc.concat(val);\n    }, []);\n  }\n\n  if (sharing.attributes.shortcut_id) {\n    docs.push(sharing.attributes.shortcut_id);\n  }\n\n  return docs;\n}; // Some permissions can not have values since they can\n// be on a global doctype. In that case, we can't sort\n// them by id\n\nvar getPermissionDocIds = function getPermissionDocIds(perm) {\n  return Object.keys(perm.attributes.permissions).map(function (k) {\n    return perm.attributes.permissions[k].values ? perm.attributes.permissions[k].values : [];\n  }).reduce(function (acc, val) {\n    return [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(acc), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(val));\n  }, []);\n};\n\nvar areAllRecipientsRevoked = function areAllRecipientsRevoked(sharing) {\n  return sharing.attributes.owner && sharing.attributes.members.filter(function (m) {\n    return m.status !== 'revoked';\n  }).length === 1;\n};\n\nvar hasBeenSelfRevoked = function hasBeenSelfRevoked(sharing, instanceUri) {\n  var me = sharing.attributes.members.find(matchingInstanceName(instanceUri));\n  return !sharing.attributes.owner && me && me.status === 'revoked';\n};\n/**\n * Returns the sharing rule of a document\n * @param {object} sharing - The sharing\n * @param {string} docId - Id of the shared document\n * @returns {object} sharing rule\n */\n\n\nvar getSharingRule = function getSharingRule(sharing, docId) {\n  return sharing.attributes.rules.find(function (r) {\n    return r.values.indexOf(docId) !== -1;\n  });\n};\n/**\n * Returns the sharing type of a directory\n * @param {object} rule - Sharing rule of a document\n * @returns {string} two-way or one-way\n */\n\n\nvar getDirectorySharingType = function getDirectorySharingType(rule) {\n  // If a document has no rule, it is a shortcut preview of a sharing.\n  // Since the sharing hasn't been accepted, it can't be synced so we return the \"one-way\" type.\n  // TODO : the sharing type shouldn't be based on rule but on ready_only prop of the member\n  return rule && rule.update === 'sync' && rule.remove === 'sync' ? 'two-way' : 'one-way';\n};\n/**\n * Returns the sharing type of a file\n * @param {object} rule - Sharing rule of a document\n * @returns {string} two-way or one-way\n */\n\n\nvar getFileSharingType = function getFileSharingType(rule) {\n  // If a document has no rule, it is a shortcut preview of a sharing.\n  // Since the sharing hasn't been accepted, it can't be synced so we return the \"one-way\" type.\n  // TODO : the sharing type shouldn't be based on rule but on ready_only prop of the member\n  return rule && rule.update === 'sync' && rule.remove === 'revoke' ? 'two-way' : 'one-way';\n};\n/**\n * Returns the sharing type of a document\n * @param {object} sharing - The sharing\n * @param {string} docId - Id of the shared document\n * @returns {string} two-way or one-way\n */\n\n\nvar getDocumentSharingType = function getDocumentSharingType(sharing, docId) {\n  if (!sharing) return null;\n  var rule = getSharingRule(sharing, docId);\n  var directorySharingType = getDirectorySharingType(rule);\n  var fileSharingType = getFileSharingType(rule);\n  return directorySharingType === 'two-way' || fileSharingType === 'two-way' ? 'two-way' : 'one-way';\n};\nvar isReadOnlySharing = function isReadOnlySharing(sharing, docId) {\n  var rule = getSharingRule(sharing, docId);\n  var directorySharingType = getDirectorySharingType(rule);\n  var fileSharingType = getFileSharingType(rule);\n  return directorySharingType === 'two-way' || fileSharingType === 'two-way' ? false : true;\n};\n\nvar buildSharingLink = function buildSharingLink(state, documentType, sharecode) {\n  var appUrl = getAppUrlForDoctype(state, documentType);\n\n  switch (documentType) {\n    case 'Notes':\n      return \"\".concat(appUrl, \"public/?sharecode=\").concat(sharecode);\n\n    default:\n      return \"\".concat(appUrl, \"public?sharecode=\").concat(sharecode);\n  }\n};\n\nvar getAppUrlForDoctype = function getAppUrlForDoctype(state, documentType) {\n  var apps = getApps(state);\n\n  switch (documentType) {\n    case 'Notes':\n      return getAppUrl(apps, 'notes');\n\n    case 'Files':\n    case 'Document':\n      return getAppUrl(apps, 'drive');\n\n    case 'Albums':\n      return getAppUrl(apps, 'photos');\n\n    default:\n      throw new Error(\"Sharing link: don't know which app to use for doctype \".concat(documentType));\n  }\n};\n\nvar getAppUrl = function getAppUrl(apps, appName) {\n  var app = apps.find(function (a) {\n    return a.attributes.slug === appName && a.attributes.state === 'ready';\n  });\n\n  if (!app) {\n    throw new Error(\"Sharing link: app \".concat(appName, \" not installed\"));\n  }\n\n  return app.links.related;\n};\n/**\n *\n * @param {SharingCollection} sharings\n * @return {Array} Array of docIds\n */\n\n\nvar getSharedDocIdsBySharings = function getSharedDocIdsBySharings(sharings) {\n  var docs = [];\n  if (!sharings.data) return [];\n  sharings.data.forEach(function (s) {\n    if (s.attributes && s.attributes.active) {\n      docs.push.apply(docs, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(getSharingDocIds(s)));\n    }\n  });\n  return docs;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cozy-sharing/dist/state.js\n");

/***/ })

})